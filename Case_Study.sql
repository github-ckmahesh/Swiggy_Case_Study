--SELECT * FROM users
USE CASE_STUDY

SELECT * FROM orders

SELECT * FROM order_details

SELECT * FROM food

SELECT * FROM menu

SELECT * FROM restaurants

--SELECT * FROM delivery_partner

--1. Find customers who have never ordered 
--ALTER 1: 

SELECT U.NAME
FROM users U
LEFT JOIN ORDERS O
ON U.USER_ID = O.user_id
WHERE O.user_id IS NULL;

--ALTER 2:

SELECT NAME
FROM USERS
WHERE USER_ID NOT IN (SELECT distinct(USER_ID) FROM orders)

--2. Average Price/dish

SELECT M.F_ID,F_NAME,ROUND(AVG(PRICE),2) AS AVG_PRICE
FROM MENU M
JOIN FOOD F ON M.F_ID = F.F_ID
GROUP BY M.F_ID,F_NAME

--3. Find the top restaurant in terms of the number of orders for a given month

SELECT R.R_NAME,COUNT(*) FROM orders O
JOIN restaurants R 
ON O.R_ID=R.R_ID
WHERE MONTH(DATE)=6
GROUP BY R.r_name
ORDER BY COUNT(*) DESC

--4. restaurants with monthly sales greater than x for 

SELECT R.r_name,O.R_ID, SUM(O.AMOUNT) AS TOTAL_SALES FROM orders O
JOIN	restaurants R 
ON O.r_id = R.r_id
WHERE MONTH(O.DATE) = 6
GROUP BY R.r_name,O.r_id
HAVING SUM(O.AMOUNT) >900
ORDER BY SUM(O.AMOUNT) DESC

----5. Show all orders with order details for a particular customer in a particular date range
--FOR CUSTOMER ANKIT, IN DATE RANGE 2022-06-10 TO 2022-07-10 


SELECT O.order_id,R.R_NAME,f_name
FROM ORDERS O
JOIN restaurants R
ON	O.R_ID	=R.r_id
JOIN order_details OD
ON OD.order_id =O.order_id
JOIN FOOD F
ON F.F_ID =OD.f_id
WHERE USER_ID = (SELECT USER_ID FROM USERS WHERE name LIKE 'ANKIT')
AND (DATE > '2022-06-10' AND DATE < '2022-07-10')

--6. Find restaurants with max repeated customers 

SELECT TOP 1 O.R_ID,R.R_NAME, COUNT(DISTINCT(USER_ID)) AS REPETATIVE_CUSTOMERS
FROM orders O
JOIN restaurants R
ON O.R_ID	=R.R_ID
WHERE R.R_ID IS NOT NULL
GROUP BY O.R_ID,R.R_NAME
ORDER BY COUNT(USER_ID) DESC 

--7. Month over month revenue growth of swiggy
--ALTER 1: 

SELECT MONTH(DATE) AS MONTH, SUM(AMOUNT) AS REV
,LAG(SUM(AMOUNT)) OVER(ORDER BY MONTH(DATE)) AS PREVIOUS_MONTH_SALES,
ROUND( 
(SUM(AMOUNT)-LAG(SUM(AMOUNT)) OVER(ORDER BY MONTH(DATE)))
/NULLIF(LAG(SUM(AMOUNT)) OVER(ORDER BY MONTH(DATE)),0) *100,2) AS M0M_GROWTH

FROM ORDERS
WHERE MONTH(dATE) IS NOT NULL
GROUP BY MONTH(DATE)
ORDER BY MONTH(DATE);

--ALTER2: CTE CAN ONLY BE USED WITH SELECT (BEFORE CTE UNDER SELECT STATEMENT DON'T WORK)
WITH CTE AS 
	(

	SELECT MONTH(DATE) AS MONTH, SUM(AMOUNT) AS REV, LAG(SUM(AMOUNT)) OVER(ORDER BY MONTH(DATE)) AS PREV
	FROM ORDERS
	WHERE MONTH(DATE) IS NOT NULL
	GROUP BY MONTH(DATE)
	)

SELECT *, ROUND(((REV-PREV)/NULLIF(PREV,0))*100,2) AS MON_CHANGE
FROM CTE
ORDER  BY MONTH;

--8. Customer - favorite food

--ALTER 1:

WITH TEMP AS (
SELECT O.USER_ID, OD.f_id, COUNT(*) AS FREQUENCY
FROM ORDERS O
JOIN order_details OD
ON O.order_id=OD.order_id
GROUP BY O.USER_ID, OD.f_id
)

SELECT * FROM 
TEMP T1
WHERE T1.FREQUENCY =(SELECT MAX(FREQUENCY) FROM TEMP T2 WHERE T2.user_id = T1.user_id)

--ALTER 2:

WITH TEMP AS(
SELECT O.USER_ID,OD.F_ID, COUNT(*) AS FREQUENCY
FROM ORDERS O
JOIN ORDER_DETAILS OD
ON O.order_id = OD.order_id
GROUP BY O.USER_ID, OD.f_id
),
RANKED AS (
SELECT *, RANK() OVER(PARTITION BY USER_ID ORDER BY FREQUENCY DESC) AS Rnk
FROM TEMP
)

SELECT * FROM RANKED
WHERE Rnk =1;
	